{"version":3,"sources":["components/ScoreBoard.js","images/red.png","images/blue.png","images/green.png","images/yellow.png","images/orange.png","images/purple.png","images/blank.png","App.js","index.js"],"names":["ScoreBoard","score","className","candyColors","blue","red","green","yellow","orange","purple","blank","App","useState","currentColorArrangement","setCurrentColorArrangement","squareBeingDragged","setSquareBeingDragged","squareBeingReplaced","setSquareBeingReplaced","scoreDisplay","setScoreDisplay","checkForColumnOfFive","i","columnOfFive","width","decidedColor","isBlank","every","square","forEach","checkForRowOfFive","rowOfFive","includes","checkForColumnOfFour","columnOfFour","checkForRowOfFour","rowOfFour","checkForColumnOfThree","columnOfThree","checkForRowOfThree","rowOfThree","moveIntoSquareBelow","randomNumber","Math","floor","random","length","dragStart","e","target","dragDrop","dragEnd","console","log","squareBeingDraggedID","parseInt","getAttribute","squareBeingReplacedID","validMove","isAColumnOfFive","isARowOfFive","isAColumnOfFour","isARowOfFour","isAColumnOfThree","isARowOfThree","useEffect","randomColorArrangement","randomColor","push","createBoard","timer","setInterval","clearInterval","map","index","alt","src","draggable","onDragStart","onDragOver","preventDefault","onDragEnter","onDragLeave","onDrop","onDragEnd","style","backgroundColor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb8129a7.chunk.js","sourcesContent":["const ScoreBoard = ({ score }) => {\r\n  return (\r\n    <div className=\"score-board\">\r\n    <h1 className=\"score\"> Your Score : {score} </h1>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ScoreBoard","export default __webpack_public_path__ + \"static/media/red.3658b37c.png\";","export default __webpack_public_path__ + \"static/media/blue.73120c15.png\";","export default __webpack_public_path__ + \"static/media/green.599f7016.png\";","export default __webpack_public_path__ + \"static/media/yellow.a3d87a9b.png\";","export default __webpack_public_path__ + \"static/media/orange.f106b2cd.png\";","export default __webpack_public_path__ + \"static/media/purple.ae25b8a5.png\";","export default __webpack_public_path__ + \"static/media/blank.fbcb9179.png\";","/* eslint-disable no-sparse-arrays */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState, useEffect } from \"react\";\nimport ScoreBoard from \"./components/ScoreBoard\";\nimport red from \"./images/red.png\";\nimport blue from \"./images/blue.png\";\nimport green from \"./images/green.png\";\nimport yellow from \"./images/yellow.png\";\nimport orange from \"./images/orange.png\";\nimport purple from \"./images/purple.png\";\nimport blank from \"./images/blank.png\";\n\n// width of the board\nconst width = 8;\n// array of candy colors\nconst candyColors = [blue, red, green, yellow, orange, purple, blank];\n\nconst App = () => {\n  // to store the candy colored arrangements state\n  const [currentColorArrangement, setCurrentColorArrangement] = useState([]);\n  const [squareBeingDragged, setSquareBeingDragged] = useState(null);\n  const [squareBeingReplaced, setSquareBeingReplaced] = useState(null);\n  const [scoreDisplay, setScoreDisplay] = useState(0);\n\nconst checkForColumnOfFive = () => {\n    for (let i = 0; i <= 39; i++) {\n      const columnOfFive = [i, i + width, i + width * 2, i + width * 3, i+width *4];\n      const decidedColor = currentColorArrangement[i];\n\n      const isBlank = currentColorArrangement[i] === blank;\n\n      // checking if we have 3 same colors in a line\n      if (\n        columnOfFive.every(\n          (square) =>\n            currentColorArrangement[square] === decidedColor && !isBlank\n        )\n      ) {\n        setScoreDisplay((score) => score + 5);\n        // replacing with an empty string\n        columnOfFive.forEach(\n          (square) => (currentColorArrangement[square] = blank)\n        );\n        return true;\n      }\n    }\n  };\n\n\n  const checkForRowOfFive = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfFive = [i, i + width, i + width * 2, i + width * 3, i+width *4];\n      const decidedColor = currentColorArrangement[i];\n      // skipping last 3 columns in row check\n      const notValid = [\n        5,6, 7, 13,14,15, 21,22, 23, 29,30, 31, 37,38, 39, 45,46, 47, 53,54, 55, 62,63, 64,\n      ];\n      const isBlank = currentColorArrangement[i] === blank;\n      if (notValid.includes(i)) continue;\n\n      if (\n        rowOfFive.every(\n          (square) =>\n            currentColorArrangement[square] === decidedColor && !isBlank\n        )\n      ) {\n        setScoreDisplay((score) => score + 5);\n        // replacing with an empty string\n        rowOfFive.forEach(\n          (square) => (currentColorArrangement[square] = blank)\n        );\n        return true;\n      }\n    }\n  };\n\n  const checkForColumnOfFour = () => {\n    for (let i = 0; i <= 39; i++) {\n      const columnOfFour = [i, i + width, i + width * 2, i + width * 3];\n      const decidedColor = currentColorArrangement[i];\n\n      const isBlank = currentColorArrangement[i] === blank;\n\n      // checking if we have 3 same colors in a line\n      if (\n        columnOfFour.every(\n          (square) =>\n            currentColorArrangement[square] === decidedColor && !isBlank\n        )\n      ) {\n        setScoreDisplay((score) => score + 4);\n        // replacing with an empty string\n        columnOfFour.forEach(\n          (square) => (currentColorArrangement[square] = blank)\n        );\n        return true;\n      }\n    }\n  };\n\n  const checkForRowOfFour = () => {\n    for (let i = 0; i <= 47; i++) {\n      const rowOfFour = [i, i + 1, i + 2, i + 3];\n      const decidedColor = currentColorArrangement[i];\n      // skipping last 2 columns in row check\n      const notValid = [\n        5,\n        6,\n        7,\n        ,\n        13,\n        14,\n        15,\n        21,\n        22,\n        23,\n        29,\n        30,\n        31,\n        37,\n        38,\n        39,\n        45,\n        46,\n        47,\n        53,\n        54,\n        55,\n        62,\n        63,\n        64,\n      ];\n      const isBlank = currentColorArrangement[i] === blank;\n      if (notValid.includes(i)) continue;\n      if (\n        rowOfFour.every(\n          (square) =>\n            currentColorArrangement[square] === decidedColor && !isBlank\n        )\n      ) {\n        setScoreDisplay((score) => score + 4);\n        // replacing with an empty string\n        rowOfFour.forEach(\n          (square) => (currentColorArrangement[square] = blank)\n        );\n        return true;\n      }\n    }\n  };\n\n  // check functions\n  const checkForColumnOfThree = () => {\n    for (let i = 0; i <= 47; i++) {\n      const columnOfThree = [i, i + width, i + width * 2];\n      // [0,8,16] ; [1,9,17] and so on...\n      const isBlank = currentColorArrangement[i] === blank;\n      // value of the first ith element to be matched with for 9*1idth & iwidth*2!\n      const decidedColor = currentColorArrangement[i];\n\n      // checking if we have 3 same colors in a line\n      if (\n        columnOfThree.every(\n          (square) =>\n            currentColorArrangement[square] === decidedColor && !isBlank\n        )\n      ) {\n        setScoreDisplay((score) => score + 3);\n        // replacing with an empty string\n        columnOfThree.forEach(\n          (square) => (currentColorArrangement[square] = blank)\n        );\n        return true;\n      }\n    }\n  };\n\n  //check for row of 3\n  const checkForRowOfThree = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfThree = [i, i + 1, i + 2];\n      const decidedColor = currentColorArrangement[i];\n      // skipping last 2 columns in row check\n      const notValid = [\n        6, 7, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64,\n      ];\n      const isBlank = currentColorArrangement[i] === blank;\n      if (notValid.includes(i)) continue;\n\n      if (\n        rowOfThree.every(\n          (square) =>\n            currentColorArrangement[square] === decidedColor && !isBlank\n        )\n      ) {\n        setScoreDisplay((score) => score + 3);\n        // replacing with an empty string\n        rowOfThree.forEach(\n          (square) => (currentColorArrangement[square] = blank)\n        );\n        return true;\n      }\n    }\n  };\n\n  const moveIntoSquareBelow = () => {\n    // 64-width = 55\n    for (let i = 0; i < 64 - width; i++) {\n      // if all empty squares are in the first row generate a new random candy to plug into that column!\n\n      const firstRow = [0, 1, 2, 3, 4, 5, 6, 7];\n      const isFirstRow = firstRow.includes(i);\n\n      if (isFirstRow && currentColorArrangement[i] === blank) {\n        let randomNumber = Math.floor(Math.random() * candyColors.length);\n        currentColorArrangement[i] = candyColors[randomNumber];\n      }\n\n      if (currentColorArrangement[i + width] === blank) {\n        currentColorArrangement[i + width] = currentColorArrangement[i];\n        currentColorArrangement[i] = blank;\n      }\n    }\n  };\n\n  const dragStart = (e) => {\n    // console.log(\"dragStart\");\n    // console.log(e.target);\n    setSquareBeingDragged(e.target);\n  };\n\n  const dragDrop = (e) => {\n    // console.log(\"dragDrop\");\n    // console.log(e.target);\n    setSquareBeingReplaced(e.target);\n  };\n\n  const dragEnd = (e) => {\n    // console.log(\"dragEnd\");\n    console.log(e.target);\n\n    const squareBeingDraggedID = parseInt(\n      squareBeingDragged.getAttribute(\"data-id\")\n    );\n    const squareBeingReplacedID = parseInt(\n      squareBeingReplaced.getAttribute(\"data-id\")\n    );\n\n    // color switching logic!\n\n    currentColorArrangement[squareBeingReplacedID] =\n      squareBeingDragged.getAttribute(\"src\");\n    currentColorArrangement[squareBeingDraggedID] =\n      squareBeingReplaced.getAttribute(\"src\");\n\n    // valid moves!\n\n    const validMoves = [\n      squareBeingDraggedID - 1,\n      squareBeingDraggedID - width,\n      squareBeingDraggedID + 1,\n      squareBeingDraggedID + width,\n    ];\n\n    //\n\n    const validMove = validMoves.includes(squareBeingReplacedID);\n\n    console.log(squareBeingDraggedID, squareBeingReplacedID);\n    const isAColumnOfFive = checkForColumnOfFive();\n    const isARowOfFive = checkForRowOfFive();\n    const isAColumnOfFour = checkForColumnOfFour();\n    const isARowOfFour = checkForRowOfFour();\n    const isAColumnOfThree = checkForColumnOfThree();\n    const isARowOfThree = checkForRowOfThree();\n\n    if (\n      squareBeingReplacedID &&\n      validMove &&\n      (isAColumnOfFive || isARowOfFive || isAColumnOfFour || isARowOfFour || isAColumnOfThree || isARowOfThree)\n    ) {\n      setSquareBeingDragged(null);\n      setSquareBeingReplaced(null);\n    } else {\n      currentColorArrangement[squareBeingReplacedID] =\n        squareBeingReplaced.getAttribute(\"src\");\n      currentColorArrangement[squareBeingDraggedID] =\n        squareBeingDragged.getAttribute(\"src\");\n      setCurrentColorArrangement([...currentColorArrangement]);\n    }\n  };\n\n  // for 64 (8x8) board with random candies\n  const createBoard = () => {\n    const randomColorArrangement = [];\n    for (let i = 0; i < width * width; i++) {\n      const randomColor =\n        candyColors[Math.floor(Math.random() * candyColors.length)];\n      randomColorArrangement.push(randomColor);\n    }\n\n    setCurrentColorArrangement(randomColorArrangement);\n    // console.log(randomColorArrangement);\n  };\n\n  // to call the state only once using useEffect with an empty array\n  useEffect(() => {\n    createBoard();\n  }, []);\n  // if width of board changed this can be called again by passing width in []\n\n  useEffect(() => {\n    // timer for every 100ms since the board will change constantly!\n    const timer = setInterval(() => {\n      checkForColumnOfFive();\n      checkForColumnOfFour();\n      checkForColumnOfThree();\n      checkForRowOfFive();\n      checkForRowOfFour();\n      checkForRowOfThree();\n      moveIntoSquareBelow();\n      // ... is a spread operator in es6 expands array into separate individual elements!\n      setCurrentColorArrangement([...currentColorArrangement]);\n    }, 100);\n    return () => clearInterval(timer);\n  }, [\n    checkForColumnOfFive,\n    checkForRowOfFive,\n    checkForColumnOfFour,\n    checkForRowOfFour,\n    checkForColumnOfThree,\n    checkForRowOfThree,\n    moveIntoSquareBelow,\n    currentColorArrangement,\n  ]);\n\n  console.log(currentColorArrangement);\n\n  return (\n    <div className=\"app\">\n      <div className=\"game\">\n        {currentColorArrangement.map((candyColors, index: number) => (\n          <img\n            alt=\"candy color\"\n            src={candyColors}\n            data-id={index}\n            draggable={true}\n            onDragStart={dragStart}\n            onDragOver={(e) => e.preventDefault()}\n            onDragEnter={(e) => e.preventDefault()}\n            onDragLeave={(e) => e.preventDefault()}\n            onDrop={dragDrop}\n            onDragEnd={dragEnd}\n            key={index}\n            style={{ backgroundColor: candyColors }}\n          />\n        ))}\n      </div>\n      <ScoreBoard score={scoreDisplay} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}